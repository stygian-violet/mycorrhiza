package interwiki

import (
	"embed"
	"fmt"
	"log/slog"
	"net/http"

	"github.com/bouncepaw/mycorrhiza/internal/cfg"
	"github.com/bouncepaw/mycorrhiza/util"
	"github.com/bouncepaw/mycorrhiza/web/viewutil"

	"github.com/gorilla/mux"
)

var (
	//go:embed *html
	fs            embed.FS
	ruTranslation = `
{{define "interwiki map"}}–ò–Ω—Ç–µ—Ä–∫–∞—Ä—Ç–∞{{end}}
{{define "name"}}–ù–∞–∑–≤–∞–Ω–∏–µ{{end}}
{{define "aliases"}}–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã{{end}}
{{define "aliases (,)"}}–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏){{end}}
{{define "engine"}}–î–≤–∏–∂–æ–∫{{end}}
	{{define "engine/mycorrhiza"}}–ú–∏–∫–æ—Ä–∏–∑–∞ üçÑ{{end}}
	{{define "engine/betula"}}–ë–µ—Ç—É–ª–∞ üå≥{{end}}
	{{define "engine/agora"}}–ê–≥–æ—Ä–∞ ·ºÄ{{end}}
	{{define "engine/generic"}}–õ—é–±–æ–π —Å–∞–π—Ç{{end}}
{{define "link href format"}}–°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ href —Å—Å—ã–ª–∫–∏{{end}}
{{define "img src format"}}–°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ src –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è{{end}}
{{define "unset map"}}–ò–Ω—Ç–µ—Ä–∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.{{end}}
{{define "documentation."}}–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.{{end}}
{{define "edit separately."}}–ò–∑–º–µ–Ω—è–π—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.{{end}}
{{define "add interwiki entry"}}–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏–Ω—Ç–µ—Ä–∫–∞—Ä—Ç—É{{end}}
{{define "save"}}–°–æ—Ö—Ä–∞–Ω–∏—Ç—å{{end}}
{{define "delete"}}–£–¥–∞–ª–∏—Ç—å{{end}}
{{define "error"}}–û—à–∏–±–∫–∞{{end}}
`
	chainInterwiki viewutil.Chain
	chainModify    viewutil.Chain
)

func InitHandlers(rtr *mux.Router) {
	chainInterwiki = viewutil.CopyEnRuWith(fs, "view_interwiki.html", ruTranslation)
	chainModify    = viewutil.CopyEnRuWith(fs, "view_interwiki_modify.html", ruTranslation)
	rtr.HandleFunc("/interwiki", handlerInterwiki).Methods("GET")
	rtr.HandleFunc("/interwiki/add-entry", handlerAddEntry).Methods("GET", "POST")
	rtr.HandleFunc("/interwiki/modify-entry/{target}", handlerModifyEntry).Methods("GET", "POST")
}

type modifyData struct {
	*viewutil.BaseData
	*Wiki
	Action    string
	Error     string
	Name      string
	CanDelete bool
}

func handlerModifyEntry(w http.ResponseWriter, rq *http.Request) {
	var (
		name    = mux.Vars(rq)["target"]
		action  = rq.PostFormValue("action")
		oldWiki = ByName(name)
		newWiki = EmptyWiki()
		err     = error(nil)
	)
	if oldWiki.IsEmpty() {
		slog.Info(
			"Could not modify entry",
			"wiki", oldWiki, "action", action, "err", "does not exist",
		)
		viewutil.HandlerNotFound(w, rq)
		return
	}
	if rq.Method == "GET" {
		viewutil.ExecutePage(viewutil.MetaFrom(w, rq), chainModify, modifyData{
			BaseData:  &viewutil.BaseData{},
			Wiki:      oldWiki,
			Name:      util.BeautifulName(name),
			Action:    "modify-entry/" + name,
			CanDelete: true,
		})
		return
	}
	switch action {
	case "save":
		newWiki, err = FromRequest(rq)
	case "delete":
	default:
		err = fmt.Errorf("invalid action '%s'", action)
	}
	if err == nil {
		err = ReplaceEntry(oldWiki, newWiki)
	}
	if err != nil {
		slog.Info("Could not modify entry", "old", oldWiki, "new", newWiki, "err", err)
		wiki := oldWiki
		if !newWiki.IsEmpty() {
			wiki = newWiki
		}
		viewutil.ExecutePage(viewutil.MetaFrom(w, rq), chainModify, modifyData{
			BaseData:  &viewutil.BaseData{},
			Wiki:      wiki,
			Error:     err.Error(),
			Name:      util.BeautifulName(name),
			Action:    "modify-entry/" + name,
			CanDelete: true,
		})
		return
	}
	slog.Info("Modified entry", "old", oldWiki, "new", newWiki)
	http.Redirect(w, rq, cfg.Root + "interwiki", http.StatusSeeOther)
}

func handlerAddEntry(w http.ResponseWriter, rq *http.Request) {
	if rq.Method == "GET" {
		viewutil.ExecutePage(viewutil.MetaFrom(w, rq), chainModify, modifyData{
			BaseData: &viewutil.BaseData{},
			Wiki:     EmptyWiki(),
			Action:   "add-entry",
		})
		return
	}
	wiki, err := FromRequest(rq)
	if err == nil {
		err = AddEntry(wiki)
	}
	if err != nil {
		viewutil.ExecutePage(viewutil.MetaFrom(w, rq), chainModify, modifyData{
			BaseData:  &viewutil.BaseData{},
			Wiki:      wiki,
			Error:     err.Error(),
			Action:    "add-entry",
		})
	} else {
		http.Redirect(w, rq, cfg.Root + "interwiki", http.StatusSeeOther)
	}
}

type interwikiData struct {
	*viewutil.BaseData
	Entries []*Wiki
	CanEdit bool
	Error   string
}

func handlerInterwiki(w http.ResponseWriter, rq *http.Request) {
	meta := viewutil.MetaFrom(w, rq)
	canEdit := meta.U.CanProceed("interwiki/modify-entry")
	viewutil.ExecutePage(meta, chainInterwiki, interwikiData{
		BaseData: &viewutil.BaseData{},
		Entries:  Entries(),
		CanEdit:  canEdit,
		Error:    "",
	})
}
