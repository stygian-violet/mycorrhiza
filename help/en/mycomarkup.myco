= Mycomarkup
**Mycomarkup** is Mycorrhiza Wiki's own markup language.

It is the only supported markup, there is no support for Markdown, Creole, etc.

A Mycomarkup document (which is most often a hypha's text part) consists of //blocks//. There are different blocks for different purposes.

== Table of contents
=> {{root}}help/en/mycomarkup#Paragraph       | Paragraph
=> {{root}}help/en/mycomarkup#Inline_link     | Inline link
=> {{root}}help/en/mycomarkup#Rocket_link     | Rocket link
=> {{root}}help/en/mycomarkup#Heading         | Heading
=> {{root}}help/en/mycomarkup#Codeblock       | Codeblock
=> {{root}}help/en/mycomarkup#Thematic_break  | Thematic break
=> {{root}}help/en/mycomarkup#Image_gallery   | Image gallery
=> {{root}}help/en/mycomarkup#List            | List
=> {{root}}help/en/mycomarkup#Quote           | Quote
=> {{root}}help/en/mycomarkup#Table           | Table
=> {{root}}help/en/mycomarkup#Transclusion    | Transclusion

== Paragraph
**Paragraphs** are the most ubiquitous blocks. You will use them a lot.

To create a paragraph, just write text. Paragraphs are separated by empty lines.

* {```
Paragraph 1

Paragraph 2
Second line of paragraph 2
```}
* {
Paragraph 1

Paragraph 2
Second line of paragraph 2
}

You can apply styling to paragraph content.
* {```
You can use //italic//, **bold**, `monospace`, ++highlighted++, ^^lifted^^, __underscored__, ,,lowered,, or ~~striked-through~~ text. You can also ++**//combine//**++ them!
```}
* You can use //italic//, **bold**, `monospace`, ++highlighted++, ^^lifted^^, __underscored__, ,,lowered,, or ~~striked-through~~ text. You can also ++**//combine//**++ them!

Use the backslash to prevent the styling.
* {```
This is not \//italic\//
```}
* This is not \//italic\//

You do not have to close the stylings, they will span until the end of line.
* {```
This is //italic
This is not
```}
* {
This is //italic
This is not
}

You can include inline links.
* {```
Just a paragraph with a couple of [[https://example.org | links]] leading [[nowhere]].
```}
* Just a paragraph with a couple of [[https://example.org | links]] leading [[nowhere]].

== Link
=== Inline link
**Inline links** are part of a paragraph.

External links can be placed verbatim if they have protocol specified. These links are called autolinks. It may not work as expected sometimes. Supported protocols for autolinks are https, http, gemini, gopher, ftp.
* {```
https://example.org
```}
* https://example.org

Wrap links to hyphae and external links with `[\[` and `]]`.
* {```
Links to a [[hypha]] and [[https://example.org]].
```}
* Links to a [[hypha]] and [[https://example.org]].

If you want to change the displayed text of the link, write it after `|`.
* {```
Links to [[hypha | a Hypha]] and [[https://example.org | some website]].
```}
* Links to [[hypha | a Hypha]] and [[https://example.org | some website]].

Since hypha names are case-insensitive, these links are basically the same: `[\[hypha]]`, `[\[Hypha]]`, `[\[HYPHA]]`.

=== Rocket link
**Rocket links** are special links. They take up a whole line. They are not consistent with usual inline links. They were taken from [[https://gemini.circumlunar.space/docs/gemtext.gmi | gemtext]].

The display text is written after the first space, not `|`. If you want to link a hypha with spaces in it, replace the spaces with _.

* {```
=> hypha
=> hypha with spaces
=> https://example.org
=> https://example.org | Display text
```}
* {
=> hypha
=> hypha with spaces
=> https://example.org
=> https://example.org | Display text
}

=== Relative link addressing
You don't have to write the full hypha name in every link, you can use **relative** links.

Consider you are editing a hypha called //fruit/apple//.

To link //fruit/pear// (a sibling hypha) you can write `[\[../pear]]`. To link //fruit/apple/red// (a subhypha) you can write `[\[./red]]`. You can do the same in rocket links, image galleries, transclusion and everywhere else you write hypha names.

There is also a way to link the wiki's non-hypha pages. For example, to link the Recent changes page, you can write `[\[/recent-changes]]`. You should use that rather than write the site's full URL because it may change in the future.

=== Link colors
Links come in several colors. Blue links are links to //existing// resources, while red links are links to //non-existent// resources. All external links are considered existing, therefore they are blue. Internal hypha links are always checked for existence.

Note that visited blue links are colored purple but are still called blue links. Moreover, blue links are yellow in the default dark theme.

== Heading
There are four levels of **headings**. They consist of some equal signs followed by a space and the heading itself. You can format the heading like a paragraph. Feel free to start with `= level 1`, because it actually translates into HTML's `<h2>`, there will be no collisions with the hypha's title.

```
= level 1
== level 2
=== level 3
==== level 4
```

There is an invisible link that shows the ยง sign near every heading right after the heading text. You can reveal it with a mouse. If you click it, the URL in the browser will change to the URL leading to that very heading. Try that on headings in this article.

== Codeblock
Use **codeblocks** to show code or any other preformatted text. Codeblocks start with triple backticks on column 1 and end similarly. You can write any text after the backticks, it is ignored. Put the preformatted text between them.

Like that, but without leading spaces:
```
 ```
 this is preformatted
    see
 ```
```

```
this is preformatted
   see
```

== Thematic break
Write four hyphens to insert a **thematic break**, represented by a horizontal line. Use it to break a theme.

* {```
----
```}
* ----

== Image gallery
Use **image galleries** to embed images to the page. Images can be either hyphae or external files. In the example below you can replace the URL with a hypha's name. If that hypha is an image, the image will be shown.

You can write a description for the image and specify its size.

* {```
img {
{{root}}static/help/image.png
{{root}}static/help/image.png {
	Description //here//
}
{{root}}static/help/image.png | 100 { Size }
{{root}}static/help/image.png | 50*50 { Square }
}
```}
* {
img {
{{root}}static/help/image.png
{{root}}static/help/image.png {
	Description //here//
}
{{root}}static/help/image.png | 100 { Size }
{{root}}static/help/image.png | 50*50 { Square }
}
}

If you were embedding a hypha called //an image hypha//, it would look like this:
* {```
img {
an image hypha
}
```}

If you put just one image, it will be displayed with no decorations:
* {```
img { {{root}}static/icon/favicon.svg }
```}
* {img { {{root}}static/icon/favicon.svg }}

=== Gallery layout

Set **gallery layout** to specify how your gallery is placed.

There are three layouts: `normal` (the default), `grid` and `side`.

Specify the layout after `img` and before `{`. If you do not write any of them, `normal` will be used.

```
img grid {
   {{root}}static/help/image.png
   {{root}}static/help/image.png
}

img side {
   {{root}}static/help/image.png | 200
   {{root}}static/help/image.png | 200
}

This text is wrapped.
```
img grid {
   {{root}}static/help/image.png
   {{root}}static/help/image.png
}

img side {
   {{root}}static/help/image.png | 200
   {{root}}static/help/image.png | 200
}

This text is wrapped.

== List
**Lists** are used for sequential or tree data. They are quite popular.

Mark each list entry with an asterisk and a space:
* {```
* one
* two
* three
```}
* {
* one
* two
* three
}

If you place dots after the asterisks, the list becomes numbered:
* {```
*. one
*. two
*. three
```}
* {
*. one
*. two
*. three
}

If you place `x` or `v`, you make the entries unfinished and finished T\ODO entries respectively.
* {```
*v Done
*x Not done
**v Super done
** Cool
```}
* {
*v Done
*x Not done
**v Super done
** Cool
}

All of Mycomarkup is supported in list entries. If you want to have multi-line entries, wrap the contents in curly braces.

* {```
* {
== Heading
Text
}
* Not multiline
```}
* {
* {
== Heading
Text
}
* Not multiline
}

== Quote
Prepend lines with `>` to quote them.

* {```
> == A heading
>
> A paragraph
> > A nested quote
```}
* {
> == A heading
>
> A paragraph
> > A nested quote
}

== Table
**Tables** are delimited by `table {...}`. Both delimeters have to be on their own lines. You can write table's caption on the first line.

```
Empty table:
table {
}
```
Empty table:
table {
}

```
table { Empty table but with proper caption
}
```
table { Empty table but with proper caption
}

Heading cells start with !, normal cells start with |. Table rows are separated with line breaks:

```
table {
! Monday  ! Friday
| sad day | happy day
}
```
table {
! Monday  ! Friday
| sad day | happy day
}

Table cells support all paragraph styling:

```
table {
! Monday ! Friday
| sad day | //happy day//
}
```
table {
! Monday ! Friday
| sad day | //happy day//
}

If you a cell to span several columns, write cell starting character that many times without spaces:

```
table {
! Monday ! Friday
|| ok day
}
```
table {
! Monday ! Friday
|| ok day
}

Currently cells spanning several rows are not supported.

If want to write a multiline cell, wrap its contents in `{}` and continue the table:
```
table {
| a | b
| { there are
//two// paragraphs in this cell! } | d
}
```
table {
| a | b
| { there are
//two// paragraphs in this cell! } | d
}

You can omit the initial pipe characters. They will be inserted automatically:
```
table {
a | b
c | d
}
```
table {
a | b
c | d
}

== Transclusion
**Transclusion** is the mechanism of including contents of other hyphae into one hypha.

To include a hypha named `yoghurt`, write a line like that:
```
<= yoghurt
```

In the 1.2 Release, the transclusion semantics and syntax were changed. If you were using transclusion before that release, please update your hyphae. For time being, the engine will report transclusion using the old syntax with colon.

Transclusion lines start with a reverse-rocket symbol (`<=`) followed by zero or more spaces. The text on the line before a line break or a pipe character (`|`) is called //target// or //target hypha//. If there is a pipe, the text after it is called //selector//. If there is no pipe, the //selector// is empty. Both //target// and //selector// are stripped of left-side and right-side whitespace before further processing.

```
<= target hypha
<= target hypha |
<= target hypha | selector
```

=== Selector
The //selector// specifies what part of the //target// to transclude. The parser checks for these words:

* `full` Transclude the whole document.
* `text` Transclude all text.
* `attachment` Transclude media only.
* `description` Transclude first paragraph only.
* `overview` Short for both `attachment` and `description`.

If only one of them is found, the corresponding part is transcluded. If several are found, the bigger transclusion is done. If none are found, `overview` is implicitly considered.

Additionally, if the word `blend` is present, the transclusion is rendered without the gray box and the link to the //target// by default.

This is an actual transclusion of a hypha below. It will fail if your wiki does not have this hypha.
<= u

Recursive transclusion is also supported but it is limited to three iterations.

== See also
=> https://mycorrhiza.wiki/hypha/why_mycomarkup | Why it was created
